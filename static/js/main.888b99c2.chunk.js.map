{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","data","setData","rendered","setRendered","useEffect","a","axios","get","chartData","console","log","length","padding","forEach","biker","splitTime","Time","split","dateTime","Date","UTC","minYear","d3","d","Year","maxYear","minTime","maxTime","xScale","domain","range","w","yScale","getTime","h","svg","append","attr","selectAll","enter","style","Place","text","Name","Doping","xAxis","tickFormat","yAxis","call","legend","className","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.888b99c2.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport * as d3 from 'd3';\nimport './App.css';\n\nfunction App() {\n\n  const [data, setData] = useState([])\n  const [rendered, setRendered] = useState(false)\n\n  useEffect(async () => {\n    try {\n      const chartData = await axios.get('https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/cyclist-data.json')\n      setData(chartData.data)\n\n\n    } catch (error) {\n      console.log('there was an error fetching data:\\n', error)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (data.length && !rendered) {\n      console.log(data)\n      const w = 1000;\n      const h = 600;\n      const padding = 50;\n\n      data.forEach(biker => {\n        const splitTime = biker.Time.split(':');\n        biker.dateTime = new Date(Date.UTC(1970, 0, 1, 0, splitTime[0], splitTime[1]))\n      });\n\n      const minYear = d3.min(data, (d) => d.Year)\n      const maxYear = d3.max(data, (d) => d.Year)\n      const minTime = d3.min(data, (d) => d.dateTime)\n      const maxTime = d3.max(data, (d) => d.dateTime)\n\n      const xScale = d3.scaleLinear()\n        .domain([minYear - 1, maxYear + 1])\n        .range([padding, w - padding]);\n\n\n      const yScale = d3.scaleTime()\n        .domain([new Date(minTime.getTime() - 15000), new Date(maxTime.getTime() + 15000)])\n        .range([h - padding, padding]);\n\n      const svg = d3.select('#chart')\n        .append(\"svg\")\n        .attr(\"width\", w)\n        .attr(\"height\", h);\n\n      console.log(data)\n      svg.selectAll(\"circle\")\n        .data(data)\n        .enter()\n        .append(\"circle\")\n        .attr('class', 'dot')\n        .attr(\"cx\", (d) => xScale(d.Year))\n        .attr(\"cy\", (d) => yScale(d.dateTime))\n        .attr(\"r\", 4)\n        .attr('data-xvalue', (d) => d.Year)\n        .attr('data-yvalue', (d) => d.dateTime)\n        .style('fill', (d) => d.Place > 5 ? 'green' : 'blueviolet')\n        .append(\"title\")\n        .attr('id', 'tooltip')\n        .attr('data-year', (d) => d.Year)\n        .text((d) => `Name: ${d.Name}\\nPlace: ${d.Place}\\nTime: ${d.Time}\\nYear: ${d.Year}\\n\\n${d.Doping}`);\n\n      const xAxis = d3.axisBottom(xScale)\n        .tickFormat(d3.format(\"d\"))\n      const yAxis = d3.axisLeft(yScale)\n        .tickFormat(d3.timeFormat('%M:%S'))\n\n\n      svg.append(\"g\")\n        .attr('id', 'x-axis')\n        .attr(\"transform\", \"translate(0,\" + (h - padding) + \")\")\n        .call(xAxis);\n\n      svg.append(\"g\")\n        .attr('id', 'y-axis')\n        .attr(\"transform\", \"translate(\" + padding + \",0)\")\n        .call(yAxis);\n\n\n      const legend = svg.selectAll('.legend')\n        .data(data)\n        .enter()\n        .append('g')\n        .attr('class', 'legend')\n        .attr('id', 'legend');\n\n\n      legend.append(\"circle\")\n        .attr(\"cx\", 700)\n        .attr(\"cy\", 400)\n        .attr(\"r\", 5)\n        .style(\"fill\", \"blueviolet\");\n\n      legend.append(\"circle\")\n        .attr(\"cx\", 700)\n        .attr(\"cy\", 430)\n        .attr(\"r\", 5)\n        .style(\"fill\", \"green\");\n\n      legend.append(\"text\")\n        .attr(\"x\", 720)\n        .attr(\"y\", 400)\n        .text(\"Riders Placed In Top 5\")\n        .style(\"font-size\", \"15px\")\n        .attr(\"alignment-baseline\", \"middle\");\n\n      legend.append(\"text\")\n        .attr(\"x\", 720)\n        .attr(\"y\", 430)\n        .text(\"Riders Not Placed In Top 5\")\n        .style(\"font-size\", \"15px\")\n        .attr(\"alignment-baseline\", \"middle\");\n\n\n\n      setRendered(true)\n    }\n  }, [data])\n\n\n  return (\n    <div className=\"App\">\n      <h1 id='title'>35 Fastest Times Up Alpe d'Huez</h1>\n      <div id='chart'></div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}